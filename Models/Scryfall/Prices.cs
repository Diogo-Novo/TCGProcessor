// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Scryfall.API.Models
{
    using Newtonsoft.Json;
    using System;

    /// <summary>
    /// Converts string values (e.g., "3.65") to nullable decimals.
    /// Handles nulls and empty strings gracefully.
    /// </summary>
    public class StringToDecimalConverter : JsonConverter<decimal?>
    {
        public override decimal? ReadJson(JsonReader reader, Type objectType, decimal? existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null)
                return null;

            if (reader.TokenType == JsonToken.String)
            {
                var str = (string)reader.Value;
                if (string.IsNullOrWhiteSpace(str))
                    return null;

                if (decimal.TryParse(str, out var result))
                    return result;
            }

            throw new JsonSerializationException($"Unable to convert {reader.Value} to decimal.");
        }

        public override void WriteJson(JsonWriter writer, decimal? value, JsonSerializer serializer)
        {
            if (value.HasValue)
                writer.WriteValue(value.Value.ToString());
            else
                writer.WriteNull();
        }
    }

    /// <summary>
    /// Defines values for Prices.
    /// </summary>
    public class Prices
    {
        [JsonProperty("usd")]
        [JsonConverter(typeof(StringToDecimalConverter))]
        public decimal? Usd { get; set; }

        [JsonProperty("usd_foil")]
        [JsonConverter(typeof(StringToDecimalConverter))]
        public decimal? UsdFoil { get; set; }

        [JsonProperty("usd_etched")]
        [JsonConverter(typeof(StringToDecimalConverter))]
        public decimal? UsdEtched { get; set; }

        [JsonProperty("eur")]
        [JsonConverter(typeof(StringToDecimalConverter))]
        public decimal? Eur { get; set; }

        [JsonProperty("eur_foil")]
        [JsonConverter(typeof(StringToDecimalConverter))]
        public decimal? EurFoil { get; set; }

        [JsonProperty("tix")]
        [JsonConverter(typeof(StringToDecimalConverter))]
        public decimal? Tix { get; set; }
    }
}
